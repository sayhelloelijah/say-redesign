{
    "posts": {
        "laravel-i-choose-you": {
            "title":"# Laravel I Choose You",
            "body":"As developers we look for tools that help us be as efficient as we can possibly be. On the front end we see this with the rise in the use of frameworks like React, Angular, and Vue for JavaScript. While we have Foundation and Bootstrap for CSS. Frameworks help us build projects and minimize the aount of time it takes to finish those projects. Like JavaScript and CSS, PHP has many frameworks available also, like CodeIgniter, Zend Framework, Cake, Symfony, and SilverStripe, but all of these pale in comparison to Laravel.\n\nI began to learn Laravel about a year ago with the release of 5.2, actually when I was designing this site. At the time I was going through a few courses on Codecademy and Udemy for PHP and at the time was going to build it with basic PHP, but I had a dilemma. I wanted to learn PHP but I didn't want to take 30 years to build the site that would showcase my work and abilities. So I began to look at Frameworks. First I looked at CodeIgniter but it seemed like it was dying and Symfony was way too complicated for me. Then I came across Laravel. Immediately, I began to do research and it became my choice and here's why.\n\n<blockquote>Laravel is a simple framework for web application development. It attempts to make writing web applications in PHP as simple as possible. - *Taylor Otwell (Creator of Laravel)*</blockquote>\n\n\n## The Documentation\n\nOne of the best features that comes with Laravel is their [documentation](http://www.laravel.com/docs). Let's face it, we all have looked at the docs of other frameworks or APIs and Immediately we're more confused than we were before. As a junior front end developer, who has only a little PHP experience, finding good documentation is like finding gold in the Gold Rush. That's what Laravel is, pure gold.\n\nThe Laravel documentation has everything that you would want. It's extensive, clear, has many examples, searchable, and it even comes with a couple of tutorials. The docs take you from it's installation, down into all of it's most important features, and gives examples of how to use them with very accurate detail. I have to say without the Laravel documentation being as clear as it is, Laravel would have been much more difficult to learn, but not impossible, which brings me to my other reasons I chose the framework.\n\n## The Code\n\nBeing a developer, you get to build and support some amazing products, but with that also comes the crappy products. If you ever dealt with legacy code from the 90's and early 2000's you'll know what I mean, but Laravel's code and structure does a few things that a good framework should do.\n\n### Standards\n\nLaravel does a very good job following the PSR coding standards, but other than that it almost forces you to do the same. The code is written beautifully. Controllers are and should be separated out for their different functions. Using commands in the terminal, Laravel can create boilerplates for controllers, models, migrations, and more. As a developer, it's not only good to learn a technology but learn how to use that tech properly and follow the guidelines that come along with it, Laravel does that with PHP.\n\n    php artisan make:controller ExampleController # Makes a controller named ExampleController\n\nHere's an example of the simple boilerplate it provides:\n\n\n    namespace App\\Http\\Controllers;\n\n    use Illuminate\\Http\\Request;\n\n    class ExampleController extends Controller\n    {\n        //\n    }\n\n```\nphp artisan make:controller ExampleController --resources\n```\n\nAnd here's an example of the CRUD boilerplate:\n\n\n    namespace App\\Http\\Controllers;\n\n    use Illuminate\\Http\\Request;\n\n    class ExampleController extends Controller\n    {\n        /*\n         * Display a listing of the resource.\n         *\n         * @return \\Illuminate\\Http\\Response\n         */\n        public function index()\n        {\n            //\n        }\n\n        /*\n         * Show the form for creating a new resource.\n         *\n         * @return \\Illuminate\\Http\\Response\n         */\n        public function create()\n        {\n            //\n        }\n\n        /*\n         * Store a newly created resource in storage.\n         *\n         * @param  \\Illuminate\\Http\\Request  $request\n         * @return \\Illuminate\\Http\\Response\n         */\n        public function store(Request $request)\n        {\n            //\n        }\n\n        /*\n         * Display the specified resource.\n         *\n         * @param  int  $id\n         * @return \\Illuminate\\Http\\Response\n         */\n        public function show($id)\n        {\n            //\n        }\n\n        /*\n         * Show the form for editing the specified resource.\n         *\n         * @param  int  $id\n         * @return \\Illuminate\\Http\\Response\n         */\n        public function edit($id)\n        {\n            //\n        }\n\n        /*\n         * Update the specified resource in storage.\n         *\n         * @param  \\Illuminate\\Http\\Request  $request\n         * @param  int  $id\n         * @return \\Illuminate\\Http\\Response\n         */\n        public function update(Request $request, $id)\n        {\n            //\n        }\n\n        /*\n         * Remove the specified resource from storage.\n         *\n         * @param  int  $id\n         * @return \\Illuminate\\Http\\Response\n         */\n        public function destroy($id)\n        {\n            //\n        }\n    }*\n\n\nAs you can see this would be a very helpful start.\n\n### Extendable\n\nIf there's something you think you would want to do with this piece of software, guess what, there's a plugin for that. If you so happen not to be able to find one, make your own, put on Github and join the other hundreds (if not thousands) of developers who are constantly building plugins for Laravel. If you want easy image uploading that can be configured properly, get Intervention Image. Want a markdown parser for writing articles or documentation? Use Parsedown. Anything you can think of search for the service first, or be happy with building your own and adding to the list of providers in your   ```config/app.php```.\n\n<img src=\"http://laracon.us/img/preview.png\" class=\"img-responsive\" alt=\"preview.png\" />\n\n## The Community\n\nThe Laravel community is growing more everyday. In fact, according to Google Trends, no other PHP framework is even close to the amount of interest that Laravel receives. I would bet that the way you even seen this article is from a Google search on Laravel. People like me are becoming evangelists of Laravel more and more, but no one is more of an evangelist of Laravel than Jeffery Way, The best way of thinking of Laracasts is, Netflix for Developers.\n\nPaying around $8/month for unlimited high quality videos from someone who is excited to teach and definitely won't put you to sleep is worth so much more. Laracasts comes with three plans, monthly, yearly, and _**FOREVER**_.\n\nThe monthly plan as I said before is only $8/month. While yearly is around $90, and for a little under $400 you could get the benefits of Laracasts for life! Laracasts even offers a pass for free to try out the content and see if you like it. Some videos are already free but you'll miss out on all the great content that truly makes it what it is if you go without paying.\n\n### Laracon\n\nOnce a year the founder of Laravel, Taylor Otwell, and some of the community's most active developers host a conference also. These conferences are called Laracon, held in the US (United States) and UK (United Kingdom). This year, 2017, it will be held in New York City, NY. Last year it was in Louisville, KY, and they're always looking for more places and people that are willing to host and help.\n\nLaracon provides detailed classes, talks, and networking to get you even further into the Laravel world. Hundreds of developers come together in a serious geekfest to talk about the framework that has helped them out the most. Sadly, I won't be at the coming Laracon, but my team is planning to make our appearance at Laracon US in 2018. I can't wait!\n\nAlso, there's *The Laravel Podcast* in which Taylor Otwell and Jeffery Way are frequent guests (actually they're more like co-hosts).\n\n## Conclusion\n\nLaravel is a great tool to write not only functional code but code that is beautifully written and done the right way. Laravel is not only a tool for learning developers but for even the most advanced, it's forgiving and grows with you.\n\nSo, What made you choose Laravel? Leave your comments below. Thank you.",
            "slug":"laravel-i-choose-you",
            "category_id":1,
            "series_id":0,
            "created_at":"2017-01-29 00:32:11",
            "updated_at":"2017-07-21 20:47:49"
        },
        "what-should-i-build": {
            "title":"# What Should I Build?",
            "body":"The ability to learn is one of the most important things that anyone could learn, but this is especially true for developers and software engineers. As developers, our technologies are always in a constant state of perpetual motion, and if you're not moving with them, then you're going to get left behind. One of the best ways I've found for learning is Project Based Learning. Project Based Learning is in simply self explanatory, it is learning by doing projects.\n\n## What projects should I build?\n\nI know what you're thinking, the same question has come across my mind many times. What should I build? Well, the answer to that is simple, yet complex. You should build something that you would want to use. Build something that you WILL use, and build something that you can have fun with. To help you get started, I'll list a few apps you could build with certain languages while teaching yourself.\n\n### HTML/CSS\n\nI'll start with the basics. Every developer should know the very basics of HTML &amp; CSS even if they want to be a Back-End Developer using nothing but server-side languages, and knowing these languages are essential for front-end developers. So what can you build with HTML/CSS?\n\n####  Build a Static Website\n\nFirst you can build a static website. Put a design together and build it, or copy one of your favorite sites using the developer tools within Chrome (if you're not using Chrome, use your current browser to download Chrome. It's 2017 get with it!). With HTML/CSS alone, you're pretty much limited in what you can build. That's when we add more functionality with JavaScript.\n\n### JavaScript\n\nJavaScript is a programming language, not a scripting language, that is 'THE Language of the Web'. It happens to be the most popular programming language in the world, and reigns king among all other languages on Github. With JavaScript you can do pretty much anything you would want to do with any other programming language, yet it's most popular feature is manipulating the Document Object Model (DOM), otherwise known as DOM manipulation. So what are some things you can build with JavaScript?\n\n#### Build a Chat App\n\nHow about building a way for you and a few friends to talk secretly in a chat app. Using services like [Socket.io](http://socket.io) you can build your own chat app. Start basic and build various features on it as you progress.\n\n#### Build a To-Do App\n\nI know, another to-do app. They're the most easy to find tutorials but there's a reason for that. They are useful for learning. Put your HTML/CSS skills to the test and make a great looking app together, and then added along with amazing functionality with JavaScript you can have a to-do app that you will use, have fun with, and be proud of.\n\n#### Animations/DOM Manipulations\n\nWorking with the DOM to some can sound like a daunting task, but this fear can be conquered by practicing DOM manipulation now, so when the time comes that you would have to do this, it won't be such a challenge. Build your own clock, build a app that changes color based on the location of the mouse pointer, there's a myriad of things you can do.\n\n<blockquote>Your work is going to fill a large part of your life, and the only way to be truly satisfied is to do what you believe is great work. And the only way to do great work is to love what you do. If you haven't found it yet, keep looking. Don't settle. As with all matters of the heart, you'll know when you find it. <br /> - *Steve Jobs* </blockquote>\n\n### PHP\n\nPHP is a fairly popular programming language to learn. With the rise of frameworks like Laravel it has become even more easier to work with. For more information on Laravel check out my article on why I chose Laravel for this site [here](http://helloelijah.com/blog/laravel-i-choose-you). So what can you build with PHP?\n\n#### Build a Blog\n\nThis site that you're on right now is built using the PHP framework Laravel. It features, image uploading, the ability to write posts, authentication, and an admin so I can effectively manage each post. I've also duplicated the blogging app to manage the ability to add projects easily. While also handling emails to send to prospective clients.\n\nSo, build a blog to chronicle everything that you're learning, Help others with tutorials, or what ever you want to write about (it's your blog, write what you want).\n\n#### Build a Membership/Social Media Site\n\nHave a great idea for a new social media platform? Build it a combination of PHP and MySQL. Or maybe you have a idea that has \"Members Only\" restricted access to the public. These things are achievable with PHP. This project will be challenging but it will also be very rewarding.s\n\n#### Build a Forum\n\nForums have been popular since the dawn of the internet. Reddit and HackerNews in the most basic explanation are forums. Your forum can have any main topic you want. Remember the goal here is not really to gain popularity, which is an added benefit, but to learn so your skills increase.\n\n## Conclusion\n\nTeaching yourself how to learn is the utmost important skill you can learn. Project Based Learning is just one of those ways to accomplish the task of learning certain skills. Udemy, Codecademy, and FreeCodeCamp all follow the principles of Project Based Learning also to help you. Feel free to check them out also.\n\nNow, I know I didn't touch many other languages like Python, VisualBasic, Ruby, etc. but these principles apply to those languages as well. I also know that there's many other things you can build with these languages. So in the comments below let me know some other projects that be built.",
            "slug":"what-should-i-build",
            "category_id":1,
            "series_id":0,
            "created_at":"2017-02-22 08:56:46",
            "updated_at":"2017-07-21 20:46:47"
        },
        "usa-state-list-for-blade": {
            "title":"# USA State List for Blade",
            "body":"Finding a state list in HTML options is usually easy. Type in a search into Google and within a few clicks, success. Today that's where I found myself, looking for a state list, but this time I needed it for a blade template. I found nothing. I was left with typing it all instead of `copy` &amp; `paste`. Dreadful, I know. NEVER AGAIN!\n\nThis list is not only for my benefit but your's also. Why type out what another has already typed. At the time of this, I am using Laravel 5.3 and it doesn't come with form helpers so it has been pulled in with the [Laravel Collective](https://laravelcollective.com/docs/5.3/html). That can be added to your project by following their guide to install it into your own Laravel project.\n\nThis list is for a select field, listing all 50 States of the United States of America. If you would like to add to the list please comment below your suggestion.\n\n```\n{{ Form::select('state', [\n    'AL' =&gt; 'Alabama',\n    'AZ' =&gt; 'Arizona',\n    'AR' =&gt; 'Arkansas',\n    'CA' =&gt; 'California',\n    'CO' =&gt; 'Colorado',\n    'CT' =&gt; 'Connecticut',\n    'DE' =&gt; 'Delaware',\n    'DC' =&gt; 'District of Columbia',\n    'FL' =&gt; 'Florida',\n    'GA' =&gt; 'Georgia',\n    'HI' =&gt; 'Hawaii',\n    'ID' =&gt; 'Idaho',\n    'IL' =&gt; 'Illinois',\n    'IN' =&gt; 'Indiana',\n    'IA' =&gt; 'Iowa',\n    'KS' =&gt; 'Kansas',\n    'KY' =&gt; 'Kentucky',\n    'LA' =&gt; 'Louisiana',\n    'ME' =&gt; 'Maine',\n    'MA' =&gt; 'Massachusetts',\n    'MI' =&gt; 'Michigan',\n    'MN' =&gt; 'Minnesota',\n    'MS' =&gt; 'Mississippi',\n    'MO' =&gt; 'Missouri',\n    'MT' =&gt; 'Montana',\n    'NE' =&gt; 'Nebraska',\n    'NV' =&gt; 'Nevada',\n    'NH' =&gt; 'New Hampshire',\n    'NJ' =&gt; 'New Jersey',\n    'NM' =&gt; 'New Mexico',\n    'NY' =&gt; 'New York',\n    'NC' =&gt; 'North Carolina',\n    'ND' =&gt; 'North Dakota',\n    'OH' =&gt; 'Ohio',\n    'OK' =&gt; 'Oklahoma',\n    'OR' =&gt; 'Oregon',\n    'PA' =&gt; 'Pennslyvania',\n    'RI' =&gt; 'Rhode Island',\n    'SC' =&gt; 'South Carolina',\n    'SD' =&gt; 'South Dakota',\n    'TN' =&gt; 'Tennessee',\n    'TX' =&gt; 'Texas',\n    'UT' =&gt; 'Utah',\n    'VT' =&gt; 'Vermont',\n    'VA' =&gt; 'Virginia',\n    'WA' =&gt; 'Washington',\n    'WV' =&gt; 'West Virginia',\n    'WI' =&gt; 'Wisconsin',\n    'WY' =&gt; 'Wyoming',],\n    null, ['placeholder' =&gt; 'State/Province'])\n}}\n```\nAfter adding this to your code a simple `search` &amp; `replace` can convert all of the `&gt;`'s into &gt;.\n",
            "slug":"usa-state-list-for-blade",
            "category_id":1,
            "series_id":0,
            "created_at":"2017-03-15 13:15:00",
            "updated_at":"2017-07-24 16:58:13"
        },
        "what-is-this-in-javascript": {
            "title":"# What Is *this* in JavaScript?",
            "body":"Let's talk about the `this` keyword in JavaScript. The concept of the `this` keyword can be very confusing for young developers and sometimes even experienced developers. But before we dive into `this` we must first understand that `this` behaves a little differently in JS than in other programming languages. In JavaScript, the value of `this` is determined by it's lexical scope. So for those who don't know let's define what a lexical scope or whether in strict mode or not,\n\n## Closure\n\nA closure in JavaScript can be represented by two different types, the global namespace and the lexical context. The global space is where we access things like the DOM (Document Object Model), using the `document` or `window` keywords. Let's further explain this with a code example.\n\n```\nfunction Person(pname) {\n    var name = pname; // name is a local variable used by the Person function\n    function getName () { // getName is an inner function, this is a closure\n        console.log(name); // logs the variable name supplied by parent function to the console\n    }\n    getName();\n}\nPerson();\n```\n\nWithin the example above, `Person()` creates the local variable, `name`, and an inner function, `getName()`, that is defined within the `Person()` function and is only available within it. The `getName` function does not have any variables of it's own, it's only job is to display the variable supplied to it from it's parent. As for the variable `name` it is only available to it's children and it doesn't pollute the global environment. If we were to run this code we would see that the `console.log` successfully runs with the variable `name` that is stated within the parent's scope. This shows us how *lexical scoping* works.\n\nFor more information check out [Mozilla's Documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures).\n\n## Let's Talk About This\n\nNow that we've dealt a little with lexical scoping and closures, we'll dive more into the `this` keyword. As stated before, the value of `this` is mostly determined by the context of the environment that it's declared in and how it's called. We must remember that `this` cannot be assigned during execution, and it could change each time that it's called.\n\n### Global Context\n```\nconsole.log(this === window); // true\nconsole.log(this.document === document); // true\nthis.a = 37;\nconsole.log(this.a === 37); // true\n```\nIn the global context the `this` refers to the global object whether we're in strict mode or not.\n\n### Inside a Function\n\nIf `this` is called inside a function, it's value depends on *how* it's called within the function.\n\n#### Simple Call\n```\n// Not in strict mode\nfunction f1() {\n    return this;\n}\n/* Since strict mode isn't set and 'this' isn't set by the call\n'this' will default to the global object */\nconsole.log(f1() === window);\n```\nSince the preceding code wasn't in strict mode and the value of `this` was not set by the call the value defaults to it's global object. On the other hand, In the following code, we see that when we are in strict mode and the value is still unset by the call, the value of `this` is now `undefined`.\n\n```\n// Strict Mode Enabled\nfunction f2() {\n    'use strict';\n    return this;\n}\n// In strict mode, 'this' remains whatever it is when entering the execution context\nconsole.log(f2() === undefined); // 'this' is undefined\n```\n\n#### The *bind* Method\n\nES5 introduced 'Function.prototype.bind'. Calling\n'f.bind(someObject)' creates a new function with the same\nbody and scope as 'f', but where 'this' occurs in the\noriginal function, in the new function it is permanently\nbound to the first argument of 'bind', regardless of How\nthe function is being used.\n\nES5 introduced us to `Function.prototype.bind`. Calling `f.bind(something)` creates a new function with the same body and scope as `f`, but where `this` occurs in the original function, in the new function it is permanently bound to the first argument of `bind`, no matter how it's being used.\n\n```\nfunction f() {\n    return this.a;\n}\nvar g = f.bind({a: 'azerty'});\nconsole.log(g()); //azerty\n\nvar h = g.bind({a: 'yoo'}); // bind only works once\nconsole.log(h()); //azerty\n\nvar o = {a: 37, f: f, g: g, h: h};\nconsole.log(o.f(), o.g(), o.h()); // 37, azerty, azerty\n```\n\nWe must take note that when we use `bind` on a function to bind the `this` keyword, then `this` will __always__ be in the context of it's parent, and no longer will be you be able to use this in any other way inside that function.\n\nReferences:\n- [Closures](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures).\n- [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this).\n\nIf this explanation was helpful (or not), please comment below how so, or how it can be improved upon. Thank You.",
            "slug":"what-is-this-in-javascript",
            "category_id":1,
            "series_id":0,
            "created_at":"2017-04-22 13:25:09",
            "updated_at":"2017-07-24 16:57:59"
        },
        "7-reasons-to-turn-down-a-project": {
            "title":"# 7 Reasons to Turn Down a Project",
            "body":"At this time in the U.S., everyone is pretty stretched for cash, even more so freelance creatives.\nMany freelancers find themselves eager to find their next client and/or project, and we excite at every possibility\nof the opportunities that await, but there are times that we need to say \"No\" to these proposals.\n\n## 1. Budget (or lack thereof)\nOne of the first questions I always ask to a future prospect is, \"What is your budget for the project\"? I ask this\nfor a few reasons. The first, I need to know if the project's worth taking on. Second, it tells me the seriousness\nof the client, and finally, the size of the budget lets me know if what the client is asking for aligns with their expectations.\n\n## 2. Outside of Expertise\nSince I've been freelancing, I've been proposed with many projects from people who didn't really understand what a developer/software engineer\ndoes. Other times, I've been proposed projects that were just beyond my skill-set. At these times, it is the right thing to do, to not string your\nclient along, but admit that their project is outside of your expertise. _Unless, you're willing to spend the extra time to learn what needs to be learned\nin order to do that project_.\n\n## 3. Gut Feeling\nWe all make decisions that we regret making later in life. In freelance web development, these times are heightened by working with difficult clients.\nMany times these difficult clients give us signs of how working with them is, but we tend to ignore these signs with the excitement of a new project.\nI can recall a client I worked with some time ago. Our communication was lacking, the project went on forever (past what was agreed upon), and the pay\nwas awful.\n\nMost of this was my fault, because I should've said no, but I needed the money and the project. In hindsight I know I could've saved a lot of my time,\nhad I just said no and worked toward getting other clients. The early signs were there and I ignored them. Don't ignore your gut.\n\n## 4. Ethical Alignment\nWhen the project proposed to your goes against the law, your values, and/or your  beliefs, it's time to turn down the project. In this area, this totally\ndepends on what you're willing to deal with. If it's against the law, **walk away**.\n\n![Frustration](https://i.imgur.com/AP6NB5X.png)\n\n## 5. The Project is Too Small\nI know you've heard the popular saying, \"There's no project too small for us!\", by some business advertisement, but the truth is, that's not true.\nThe project may be too small, if it doesn't even come close to your base price, when projected amount of work hours are calculated.\n\nFrom my personal experience, I tend not to do websites for photographers because the amount of work needed is usually so low that it's a high percentage\naway from my base rate. Many photographers only need a small site to display their photos. These types of sites can be done at a less cost to the photographer\nusing sites like Squarespace, so I guide these potential clients to what I believe is a better option for them, with the hopes they send their friends to me, knowing\nI'm not just trying to line my pockets.\n\n## 6. Client Won't Pay Deposit\nAll projects should be secured with a deposit. Deposits show just how serious the client is, and prevents the developer from working until the deposit is made.\nThe deposit is to provide safety for the freelancer, so that we know even if the client disappears or walks away, our work and time is accommodated for. When the\nclient isn't willing to pay the deposit, **that is a major red flag**. All forward progress should cease until the deposit is paid. No matter how, \"good\" of a client\nyou think this will be.\n\n## 7. Unrealistic Expectations\nYou've heard the quote from *It's a Wonderful Life*:\n\n<blockquote> What is it you want, Mary? What do you want? You want the moon? Just say the word and I'll throw a lasso around it and pull it down. Hey. That's a pretty good idea. I'll give you the moon, Mary. <br />\n- <em><strong>George Bailey</strong> (It's A Wonderful Life)</em>\n</blockquote>\n\nSometimes it seems like this is what clients ask for. While having a budget to build a child's bicycle they ask for the luxuries of a 2017 Tesla Model S. When you run\nthese types of clients, **turn them down!** These types of clients cause headaches and can never be satisfied. Do yourself a favor, turn slowly,\nand walk away.\n\n## Conclusion\nWe freelance creatives, developers, designers, etc., love to do what we do. We jump at the opportunities that arise to us. Don't let your eagerness to work cause you undue stress\nwhen it can be avoided. We will always run into the \"Clients from Hell\", but it's up to us to pay attention to the signs, and choose our clients correctly. In the comments below,\nlet me know about your worse client experience. So we can finally answer the question, **TURN DOWN FOR WHAT!?!** _(I had to do it)_",
            "slug":"7-reasons-to-turn-down-a-project",
            "category_id":2,
            "series_id":0,
            "created_at":"2017-07-20 22:24:15",
            "updated_at":"2017-07-24 19:38:39"
        },
        "the-future-of-helloelijah": {
            "title":"# The Future of HelloElijah.com",
            "body":"I can't believe that it's really been almost a year since my last post. Life has been EXTREMELY busy. Let's recap.\n\nMy last post was in late July of 2017, since then, I've gotten married, then We, my wife and I, started a \"TV\" show/network\non Facebook, called [Hitch'd TV](https://facebook.com/hitchdtv). On Hitch'dTV we give relationship advice, we talk about issues\nconcerning couples moving toward marriage, singles wanting to be married, and just about everything in between dealing with\nrelationships. We go live every Thursday night at 9pm on the Facebook page. So as you have read, it has been a busy year,\nand it hasn't slowed down much in 2018 either. As married life, and the new show continue to grow. So have my responsibilities\nat the church. Not only do I speak on a consistent basis, every 3rd Sunday, but I'm also the President of RECLAIM, a\nMen's ministry.\n\n<img class=\"img-responsive\" src=\"https://scontent-ort2-1.xx.fbcdn.net/v/t31.0-8/30052494_1006101652878331_8982465628067156819_o.jpg?_nc_cat=0&amp;oh=b2fa34532018061f02f4d171fa3287a0&amp;oe=5B7A7424\" alt=\"Kingdom Man: Reclaiming Our Manhood\" />\n\nAs the president of RECLAIM I've been tasked with the duty putting together a [conference for men](https://www.facebook.com/events/2022996067917482/). Which that in and of\nitself is a daunting task. I've had headaches and heartaches, anger and almost to the point of crying, and I even wanted to quit.\nBut finally, the conference is close at hand. In fact, it's this weekend. May 25-26th. We have an amazing cast of local ministers,\na local rap artist, [Mike Renell](https://www.facebook.com/Mikerenell/), who just released his debut album, [Exposed](https://www.showmechristrecords.com/#comp-j16p9ligiframe).\n\n<img class=\"img-responsive\" src=\"https://static.wixstatic.com/media/11c82f_7ee023c0fe854d9cb7eb918482b2d1f9~mv2_d_3100_3100_s_4_2.png/v1/fill/w_898,h_1070,al_c,usm_0.66_1.00_0.01/11c82f_7ee023c0fe854d9cb7eb918482b2d1f9~mv2_d_3100_3100_s_4_2.png\" alt=\"Mike Renell's Exposed Album\" />\n\nSo that explains where I've been all this time and how things have really been moving forward, but I still haven't addressed anything\nabout this blog. I noticed I haven't been producing as much content as I liked a while ago. Mostly because the current state of the blog\nseems really geared to Technology, Development, and other geek stuff. Don't get me wrong, I love geek stuff, I'm a geek. But it's\nnot all I think about. I want this blog to represent me wholly and not just a segment of my thinking. So the future plans of HelloElijah.com\nare simple.\n\n## Plans for HelloElijah.com\n\nRegarding the current status of the site, I have some good news and bad news. I'll start with the bad news.\n\n### The Bad News\nWell to give it to you short and sweet. Nearly everything that I'm doing on this site will be changing. I'm no longer going to be focusing\non just tech stuff, software engineering &amp; development, or geek stuff. In order for the site to really be what I need, I'll have to change what I'm doing on the site.\nCurrently the site only gets about 1 view a month. That's really sad, and that one view is probably me on a different device than what I have excluded from my analytics.\nREALLY SAD :(\n\nWell the thing is that's about all the bad news I have. Everything else seems to me to be good news.\n\n### The Good News\n\nThe good news is, EVERYTHING IS CHANGING! Okay, I know I just said that in the last section as a bad thing, but the truth is that change can be a good thing\ndepending on who's view you're taking it from. But this time, the changes that need to be made are really good changes. Like the topics\nwill be changing from just talking about tech. Now I'll be writing my views on everything I find interesting, including but not limiting myself to tech.\nSo I'll be talking about:\n- Technology\n- Politics\n- Religion\n- Movies\n- Culture\n- History\n- and many other topics as they come up\n\nAlso, I will be redesigning the site soon, to create a new look in order to better represent the new direction. The new design will focus on the subject matter, being\nmore readable and simplified so the design doesn't get in the way of the content. \n\n## Conclusion\nMy life has really changed for the good. It has caused some stress, but also created wonderful opportunities for growth. As I change in life so do my interests. I want to share\nthose things with you. But before I fully get back to the flow. I want to create a place that is simple, where I can be comfortable with the design, and can be free\nto express my ideas. The new design, and new direction of the site should provide and great freeway of thought and expression. Follow me as I take this journey, and we grow together.",
            "slug":"the-future-of-helloelijah",
            "category_id":3,
            "series_id":0,
            "created_at":"2018-05-22 15:38:01",
            "updated_at":"2018-05-22 16:00:23"
        },
        "website-update-1": {
            "title":"# Website Update #1",
            "body":"As mentioned before in the previous post, I will be making some changes to this site. I decided to tackle this project with incremental changes.\nThe first of these changes will be removing the \"Projects\" sections from the homepage and navigation. Let me explain my reasoning.\n\n## Reason #1 - Focus\nWhen the site was originally in it's planning stages, I was seeking out freelance opportunities within my web development skills.\nSo, as any logical person who has the skill of building sites, I built my own site that would be focused on getting clients.\nThat type of site would need to have sample work and would be easily visible to the public for any inquiries.\n\n<blockquote>Nothing is as permanent as change.<br />-Dr. Myles Munroe</blockquote>\n\nWell, that didn't go quite like I expected it. As Dr. Myles Munroe once stated, _Nothing is as permanent as change_.\nWithin the past two years, I haven't really gotten any clients, plenty of leads, but no true clients. Also, my want\nto do freelance work had started to diminish. I started to want more. Not only to develop sites, but rather to develop\nbusinesses, including my own. I'm a speaker, a minister, and I have a strong knack for transforming things into success.\n\nAll in all, my focus changed so my platform. My little bit of real estate on the web now will change, some what.\n \n## Reason #2 - Lack of Projects\nSo, as mentioned in the previous statement. Though I was getting some leads, I wasn't landing any projects. Most of\nthese occurrences were because of lack of budget, funds, or commitment. I even had one that started out great, but the\nwork was becoming a strain as I had severely undercharged for the project (completely my fault).\n\nSo because the number of projects that are currently available for are so limited, I feel it is best not to display\nthem on the homepage. Though they will still be within the site at the same URL. Because the time may come that I want\nto show someone what I can do. I do still want to maintain a record of work.\n\n## Conclusion (tl;dr)\nTo wrap it up, I'm removing the projects section from the main navigation and homepage. The reason is because\nthe direction I want to take my life and interests should be reflected in the site that represents me on the INternet.\n\nThank you! ",
            "slug":"website-update-1",
            "category_id":3,
            "series_id":0,
            "created_at":"2018-06-21 22:30:29",
            "updated_at":"2018-06-21 22:30:29"
        },
        "expert": {
            "title":"# What is an Expert?",
            "body":"Over the past few weeks, I've taken various online courses, read countless blogs, finished\ntwo certifications from freeCodeCamp, all of this really dealing with one over-arching area\nof expertise, Front End Development/Engineering. More specifically, to improve my JavaScript\nskills. But recently I was caught off guard.\n\nI went to Pluralsight and seen that they had an assessment test to figure out what my gaps\nof knowledge were. So I took the test and the results were shocking.\n\nAt least the result was shocking to me. I took the assessments for HTML5, CSS3, &amp; JavaScript.\nUnsurprisingly, the assessment considered me an expert in HTML &amp; CSS. I figured I would rank\n'high because I love to keep with writing semantic HTML and CSS that doesn't get in the way.\nSo, that wasn't really what surprised me.\n\nThe surprise was that I ranked so high with JavaScript. Even with JavaScript, I was ranked\nas an expert! The assessment still pointed out where my gaps of knowledge were but it was\ntwo areas. While the areas that I **thought** I'd struggle with, seemed quite easy.\n\nIt felt quite weird, to be honest. I don't feel like an expert. There's so much I don't know,\nso much I need to learn. I know for a fact that I have gaps in my own understanding. So how\nin the world am I an expert? I began to question the very idea of what an expert is.\n\n## What is an Expert?\nThe dictionary definition of an expert is:\n\n<blockquote>\n<strong>noun:</strong><br />\na person who has special skill or knowledge in some particular field; specialist; authority\n\t<br /><br /><strong>adjective:</strong><br />\npossessing special skill or knowledge; trained by practice; skillful or skilled (often followed by in or at)\n\t<br /><br /><strong>verb:</strong><br />\nto act as an expert for.\n</blockquote>\n\nDoes this mean the person knows every single thing about his/her field, the short answer NO.\n\nIt means so much more. An expert is a person who has taken and takes time to hone their abilities\nin a particular field, skill, or activity. They've been through ups and downs, made plenty of\nmistakes and have learned from the mistakes they've made. In fact, Niels Bohr, famous for his\npart in the development of quantum theory, once said:\n\n<blockquote>\"An expert is a man who has made all the mistakes which can be made, in a narrow field.\" ~ Niels Bohr</blockquote>\n\n## But it's still weird!\nThough by definition, I could be considered an expert. But, even through testing, and by some of\nmy peers, it still just feels weird being considered an expert.\n\nI guess it could be a result of the [Imposter Phenomenon (aka Imposter Syndrome)](https://en.wikipedia.org/wiki/Impostor_syndrome).\nI think I'll write more about that later.\n\nI just find it weird to think of myself as an expert in anything. But the truth is, after going\nover this in my mind I do find myself in a constant learning mode building my skills for\nthe job at hand. I'm always teaching others that want to know what I know, as well as asking my own questions\nto those who I believe will have the answer.\n\nI'm not an expert, believing my time for learning is over but I'm an expert who will increase in his expertise.\nI will continue to improve. I will continue to learn. I will continue to teach those who want to learn as best as\nI can.\n\n## Conclusion (tl;dr)\nAn expert is not a person who knows it all, but rather someone who is highly skilled due to training, practice, and\nconsistent learning. I find myself in this state all the time, always reading blogs and books, listening podcasts,\ntaking courses and practicing. Below is listed some resources to help you do the same.\n\n### Resources\n*__Disclosure:__ I do not get paid for any of theses links or products. These are just things I've found useful.*\n#### Blogs\n* [Bits of Code](https://bitsofco.de/)\n* [CSS-Tricks](https://css-tricks.com/)\n* [Simple Programmer](https://simpleprogrammer.com/)\n* [CoDrops](https://tympanus.net/codrops/)\n* [Medium](https://medium.com/)\n\n#### Books\n* [Eloquent JavaScript](https://eloquentjavascript.net/)\n* [JavaScript: The Good Parts](https://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742)\n* [JavaScript Design Patterns](https://www.amazon.com/Learning-JavaScript-Design-Patterns-Developers/dp/1449331815/ref=sr_1_3?keywords=javascript+design+patterns&amp;qid=1575754100&amp;sr=8-3)\n* [JavaScript Patterns](https://www.amazon.com/JavaScript-Patterns-Better-Applications-Coding/dp/0596806752/ref=sr_1_3?keywords=javascript+patterns&amp;qid=1575754129&amp;sr=8-3)\n* [Web Design with HTML, CSS, JavaScript and jQuery Set](https://www.amazon.com/Web-Design-HTML-JavaScript-jQuery/dp/1118907442/ref=sr_1_3?keywords=html%2Fcss&amp;qid=1575754156&amp;sr=8-3)\n\n#### Podcasts\n* [ShopTalk Show](https://shoptalkshow.com/)\n* [The Drunk Web](https://www.thedrunkweb.com/)\n* [JavaScript Jabber](https://devchat.tv/js-jabber/)\n* [Developer Tea](https://spec.fm/podcasts/developer-tea)\n* [Front End Happy Hour](https://frontendhappyhour.com/)\n\n#### Courses\n* [freeCodeCamp](https://www.freecodecamp.org/)\n* [Udacity](https://www.udacity.com/)\n* [Codecademy](https://www.codecademy.com/)\n* [Udemy](https://www.udemy.com/)\n* [Pluralsight](https://www.pluralsight.com/)\n\n#### Other Resources\n* [Codewars](https://www.codewars.com)\n* [CSS Battle](https://cssbattle.dev/)\n* [W3C](https://www.w3.org/)\n\nAll these resources have helped me developed over these short few years.\nHopefully, they'll be a help to you as well.",
            "slug":"expert",
            "category_id":1,
            "series_id":1,
            "created_at":"2019-12-07 20:47:16",
            "updated_at":"2019-12-07 20:52:18"
        },
        "sass-boilerplate": {
            "title":"# sass-boilerplate - Sass Organization",
            "body":"Some of the biggest problems in development can come from the smallest things.\nBugs can be introduced because of a missed semicolon or a mistyped variable.\n\nSometimes the things that really slow down a project, especially a new project,\nis trying to figure out how you should organize your code. Where should this bit\ngo? In JavaScript and other programming languages, we use design patterns. You may\nbe familiar with some (ie. MVC, MVVM, MV*, etc...). But what about a method for our\nSass?\n\nWell, I created a simple package called,\n[sass-boilerplate](https://github.com/sayhelloelijah/sass-boilerplate).\n\n\n## Modular CSS\nThe package itself, does nothing. There's no JavaScript or any other programming\nlanguages. It's just a few folders, and a few `.scss` files.\n\nIn creation of the [sass-boilerplate](https://github.com/sayhelloelijah/sass-boilerplate)\nrepo, the main focus was to create a folder structure that would give each and every\nsnippet of code a home. Removing the thought process of asking, where should this go?\n\nAnd also removing the need to create the same exact folder structure I found myself using\ntime and time again. The boilerplate is adapted from [SMACSS](http://smacss.com/) or\nrather Scalable and Modular Architecture for CSS. The book is free!\n\nThe folder structure is quite simple, there are 4 folders, `base`, `dependencies`, `modules`,\nand `utilities`. As well as, a few `.scss` files within those folders. Let's dive into\neach one of them, to give a better understanding of why they exist.\n\n![SMACCS](http://smacss.com/img/book-covers.png) [SMACSS - DOWNLOAD THE BOOK](http://smacss.com/)\n\n### Base directory\nThe purpose of the `base` directory is to contain all the default styles. These styles would be\nrelated to the `base` elements. There are no classes, or ID's. This folder is strictly for code\non the basic level. The styles could be any element selector, descendant or child selectors,\nand any psuedo-classes.\n\nAt this level there should be no need to overwrite any other styles. \n\n```css\nbody {\n\tmargin: 0;\n\tpadding: 0;\n}\n\np {\n\tfont: {\n\t\tsize: 16px;\n\t\tweight: 400;\n\t}\n}\n```\n\n### Dependencies directory\nThe `dependencies` directory is available for your imported packages. This is where you can import\n*Bootstrap* or *Foundation*, bring in any resets, or any other package that could be imported with\n`*.scss`. \n\n```css\n@import ('node_modules/bootstrap/bootstrap');\n@import ('https://fonts.googleapis.com/css?family=Open+Sans')\n```\n\n### Modules Directory\nNow this is where the rubber really gets to meet the road. In the `modules` directory this is where\nthe bulk of your code will go. Various components may go here, the site's navigation, contact form,\ncards, headers, footers, etc...\n\n```css\n\t.nav {\n\t\tbackground-color: #ffd700;\n\t\tcolor: #252525;\n\t\t\n\t\t@at-root &amp;__list {\n\t\t\tfloat: right;\n\t\t\t\n\t\t\t@at-root &amp;-item {\n\t\t\t\tdisplay: inline-block;\n\t\t\t}\n\t\t}\n\t}\n```\n\n### Utilities Directory\nAnd the last given directory is the `utilities` directory. The `utilities` directory is a very special\ndirectory. Inside this directory all your help files will call it home.\n\nThis folder holds your mixins, variables, functions, and all other Sass tools to help you out in your \nproject.\n\n### Bonus\nThere's one other directory that you may want to create that I didn't include. That directory or file\nis called the *shame* file. The shame file or folder is for code that you know for a fact needs to be\nrefactored but needs to be done as a hot fix. This file will be a collection of styles that would work\nas a todo list of code that needs to be readdressed.\n\nI think this is a good idea, because it gives you one area to look at for all your technical debt that\nyou will accrue over time. Instead of looking into multiple files, you'll have one singular location.\n\n## Conclusion (tl;dr)\nEverything can be structured and organized, even your Sass files. You can take a look at the\n[sass-boilerplate](https://github.com/sayhelloelijah/sass-boilerplate) repo or even install into your next\nproject:\n\n```bash\n\tnpm i @sayhelloelijah/sass-boilerplate\n\tmv {path_to_project}/node_modules/\\@sayhelloelijah/sass-boilerplate {path_to_asset_director}/{rename_directory}\n```\nWith the second command I recommend moving it out of the `node_modules` directory into your project's\nroot directory and changing it's name to whatever you like. Or you could keep \"sass-boilerplate\" if you want.\nIt's your project! ",
            "slug":"sass-boilerplate",
            "category_id":1,
            "series_id":0,
            "created_at":"2019-12-09 21:59:43",
            "updated_at":"2019-12-09 22:01:21"
        }
    }
}